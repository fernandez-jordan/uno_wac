'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.render = exports.serialize = exports.update = exports.find = exports.sanitize = exports.validate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _abstractCreateController = require('./abstract-create-controller.js');

var _abstractCreateController2 = _interopRequireDefault(_abstractCreateController);

var _logger = require('../utils/logger.js');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var PatchController = function (_AbstractCreateContro) {
    _inherits(PatchController, _AbstractCreateContro);

    function PatchController() {
        _classCallCheck(this, PatchController);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(PatchController).apply(this, arguments));
    }

    _createClass(PatchController, null, [{
        key: 'validate',
        value: function validate(req, res, next) {
            // TODO add check for req.body.type as per jsonapi.org requirements.
            if (!!req.body.data && !!req.body.data.id && !!req.body.data.attributes) {
                next();
            } else {
                _get(Object.getPrototypeOf(PatchController), 'setException', this).call(this, 400, 'Request failed validation', next);
            }
        }

        /**
         * Finds the resource based on the id and model registered to the route.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'find',
        value: function find(req, res, next) {
            var _this2 = this;

            // get the resource if from the route
            var id = req.params[res.locals.id];
            var model = res.locals.model;
            var criteria = {};

            if (!!model) {
                criteria[res.locals.id] = id;
                var query = model.findOne(criteria);

                _logger2.default.info('Finding resource by ' + res.locals.id + ' = ' + id);

                if (!!res.locals.populate) {
                    _logger2.default.info('Populating model with the following fields: ' + res.locals.populate);
                    query.populate(res.locals.populate);
                }

                query.exec(function (err, result) {
                    if (err) {
                        _get(Object.getPrototypeOf(PatchController), 'setException', _this2).call(_this2, 500, err.toString(), next);
                    } else if (!result) {
                        _get(Object.getPrototypeOf(PatchController), 'setException', _this2).call(_this2, 404, 'Record not found', next);
                    } else {
                        res.locals.resource = result;
                        next();
                    }
                });
            } else {
                _get(Object.getPrototypeOf(PatchController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Updates the found model with the passed data. Since this is a patch, it is a merge, rather than a replace.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'update',
        value: function update(req, res, next) {
            var _this3 = this;

            var updates = req.body.data.attributes;
            var resource = res.locals.resource;

            if (!!resource) {
                (function () {
                    var updatedResource = _lodash2.default.merge(resource, updates);

                    updatedResource.save(function (error) {
                        if (error) {
                            _get(Object.getPrototypeOf(PatchController), 'setException', _this3).call(_this3, 404, 'Error on model save: ' + error.toString(), next);
                        } else {
                            res.locals.resource = updatedResource;

                            if (!!res.locals.populate) {
                                updatedResource.populate(res.locals.populate, function (populateError) {
                                    if (error) {
                                        _get(Object.getPrototypeOf(PatchController), 'setException', _this3).call(_this3, 404, 'Error on model populate: ' + populateError.toString(), next);
                                    } else {
                                        next();
                                    }
                                });
                            } else {
                                next();
                            }
                        }
                    });
                })();
            } else {
                _get(Object.getPrototypeOf(PatchController), 'setException', this).call(this, 404, 'Record not found', next);
            }
        }
    }]);

    return PatchController;
}(_abstractCreateController2.default);

exports.default = [PatchController.validate, PatchController.sanitize, PatchController.find, PatchController.update, PatchController.serialize, PatchController.render];
var validate = exports.validate = PatchController.validate;
var sanitize = exports.sanitize = PatchController.sanitize;
var find = exports.find = PatchController.find;
var update = exports.update = PatchController.update;
var serialize = exports.serialize = PatchController.serialize;
var render = exports.render = PatchController.render;