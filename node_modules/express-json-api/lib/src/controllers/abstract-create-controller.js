'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _abstractController = require('./abstract-controller.js');

var _abstractController2 = _interopRequireDefault(_abstractController);

var _sanitizer = require('../utils/sanitizer');

var _sanitizer2 = _interopRequireDefault(_sanitizer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * An abstract controller for creating (POST) and updating (PATCH, PUT) controllers.
 */

var AbstractCreateController = function (_AbstractController) {
    _inherits(AbstractCreateController, _AbstractController);

    function AbstractCreateController() {
        _classCallCheck(this, AbstractCreateController);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(AbstractCreateController).apply(this, arguments));
    }

    _createClass(AbstractCreateController, null, [{
        key: 'sanitize',

        /**
         * Sanitize the input to ensure the data submitted does is escaped correctly.
         *
         * This allows for a custom sanitizer, but also falls back to a default xss sanitizer.
         *
         * @param req
         * @param res
         * @param next
         */
        value: function sanitize(req, res, next) {
            var options = res.locals.sanitize;
            var sanitizer = options.method;
            var updates = req.body.data.attributes;

            if (typeof sanitizer === 'undefined') {
                sanitizer = _sanitizer2.default;
            }

            if (options.active && typeof options.fields === 'undefined') {
                // sanitize all fields
                _lodash2.default.forEach(_lodash2.default.keys(updates), function (field) {
                    updates[field] = sanitizer.sanitize(updates[field]);
                });
            } else if (options.active && options.fields.constructor === Array) {
                // sanitize selected fields
                _lodash2.default.forEach(_lodash2.default.keys(updates), function (field) {
                    if (options.fields.indexOf(field) > -1) {
                        updates[field] = sanitizer.sanitize(updates[field]);
                    }
                });
            }

            req.body.data.attributes = updates;
            next();
        }

        /**
         * Renders the model to the json response.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'render',
        value: function render(req, res, next) {
            var resource = res.locals.resource;

            if (typeof resource === 'undefined') {
                this.setException(500, 'Nothing to render', next);
            }
            // send the data back to the client
            res.json({
                meta: {
                    page: {
                        total: 1,
                        offset: 1,
                        limit: 1
                    }
                },
                data: resource
            });
        }
    }]);

    return AbstractCreateController;
}(_abstractController2.default);

exports.default = AbstractCreateController;