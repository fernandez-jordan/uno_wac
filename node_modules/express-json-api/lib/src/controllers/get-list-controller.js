'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.render = exports.serialize = exports.execute = exports.page = exports.sort = exports.query = exports.filter = exports.search = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _abstractReadController = require('./abstract-read-controller.js');

var _abstractReadController2 = _interopRequireDefault(_abstractReadController);

var _logger = require('../utils/logger.js');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var GetListController = function (_AbstractReadControll) {
    _inherits(GetListController, _AbstractReadControll);

    function GetListController() {
        _classCallCheck(this, GetListController);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(GetListController).apply(this, arguments));
    }

    _createClass(GetListController, null, [{
        key: 'query',

        /**
         * Instantiates the monogo query by mapping the route to the mongoose model.
         *
         * @param req
         * @param res
         * @param next
         */
        value: function query(req, res, next) {
            var model = res.locals.model;
            if (!!model) {
                var criteria = res.locals.criteria || {};
                res.locals.query = model.find(criteria);

                if (!!res.locals.populate) {
                    _logger2.default.info('Populating model with the following fields: ' + res.locals.populate);
                    res.locals.query = res.locals.query.populate(res.locals.populate);
                }

                next();
            } else {
                _get(Object.getPrototypeOf(GetListController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Constructs the search query and applies it to the mongo query.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'search',
        value: function search(req, res, next) {
            var config = res.locals.search;
            var criterion = { $or: [] };
            var param = req.query.q;
            var criteria = res.locals.criteria || {};

            if (!!res.locals.model) {
                if (!!config && !!config.active && !!param) {
                    (function () {
                        var terms = param.trim().split(' ');
                        var matchingExpressions = terms.filter(function (term) {
                            if (!_lodash2.default.isEmpty(term)) {
                                return term;
                            }
                        }).map(function (term) {
                            return new RegExp(term.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'), 'i');
                        });

                        _lodash2.default.forEach(config.fields, function (fieldName) {
                            var field = {};
                            field[fieldName] = { $in: matchingExpressions };
                            criterion.$or.push(field);
                        });
                    })();
                }

                if (criterion.$or.length > 0) {
                    res.locals.criteria = _lodash2.default.extend(criteria, criterion);

                    _logger2.default.info('Setting search criteria: ' + criterion);
                }
                next();
            } else {
                _get(Object.getPrototypeOf(GetListController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Applies the filters to the mongo query.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'filter',
        value: function filter(req, res, next) {
            var model = res.locals.model;
            var criterion = { $and: [] };
            var criteria = res.locals.criteria || {};

            if (!!model && !!model.schema) {
                (function () {
                    var schema = model.schema;

                    if (!!req.query.filter) {
                        _lodash2.default.forEach(req.query.filter, function (value, key) {
                            if (!!schema.path(key)) {
                                var field = {};

                                // handle multiple comma separated values
                                if (value.indexOf(',') > -1) {
                                    field[key] = {
                                        $in: value.split(',')
                                    };
                                } else {
                                    field[key] = value;
                                }
                                criterion.$and.push(field);
                            }
                        });
                    }

                    if (criterion.$and.length > 0) {
                        res.locals.criteria = _lodash2.default.extend(criteria, criterion);
                        _logger2.default.info('Setting filter criteria: ' + criterion);
                    }
                    next();
                })();
            } else {
                _get(Object.getPrototypeOf(GetListController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Applies sort to the mongo query.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'sort',
        value: function sort(req, res, next) {
            var model = res.locals.model;
            var resQuery = res.locals.query;

            if (!!model && !!model.schema) {
                (function () {
                    var schema = model.schema;
                    if (!!req.query.sort) {
                        var sorts = req.query.sort.split(',');

                        _lodash2.default.forEach(sorts, function (sortItem) {
                            // remove the descending term to find if the property exists on the model/schema.
                            var field = _lodash2.default.trimLeft(sortItem, '-');
                            if (!!schema.path(field)) {
                                _logger2.default.info('Applying sort by: ' + sortItem);
                                resQuery.sort(sortItem);
                            }
                        });
                    }

                    next();
                })();
            } else {
                _get(Object.getPrototypeOf(GetListController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Creates the paging data eg. The total, limit and offset.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'page',
        value: function page(req, res, next) {
            var resQuery = res.locals.query;

            if (!!resQuery) {
                // we always set the paging query to lean because we want it fast.
                resQuery.lean(true);

                if (!req.query.page) {
                    req.query.page = {};
                }

                if (!req.query.page.offset) {
                    req.query.page.offset = 0;
                }

                if (!req.query.page.limit || req.query.page.limit > res.locals.limit) {
                    req.query.page.limit = res.locals.limit;
                }

                // run the query to get the total
                resQuery.count(function (err, total) {
                    // set the page on the response
                    res.locals.page = {
                        total: _lodash2.default.round(total),
                        limit: _lodash2.default.round(req.query.page.limit),
                        offset: _lodash2.default.round(req.query.page.offset)
                    };

                    _logger2.default.info('Applying offset: ' + res.locals.page.offset);
                    _logger2.default.info('Applying limit: ' + res.locals.page.limit);

                    // reset and add limits
                    resQuery.skip(res.locals.page.offset).limit(res.locals.page.limit);

                    next(err);
                });
            } else {
                this.setException(500, 'Query Not Found', next);
            }
        }

        /**
         * Executes the mongo query.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'execute',
        value: function execute(req, res, next) {
            var resQuery = res.locals.query;

            if (!!resQuery) {
                resQuery.lean(res.locals.lean);

                _logger2.default.info('Performing query');

                resQuery.exec('find').then(function (results) {
                    res.locals.resources = results;
                    next();
                }, function (err) {
                    next(err);
                });
            } else {
                _get(Object.getPrototypeOf(GetListController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Renders the models to the json response.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'render',
        value: function render(req, res, next) {
            var resources = res.locals.resources;

            if (typeof resources === 'undefined') {
                this.setException(500, 'Nothing to render', next);
            }

            // send the data back to the client
            res.json({
                meta: {
                    page: res.locals.page
                },
                data: resources
            });
        }
    }]);

    return GetListController;
}(_abstractReadController2.default);

exports.default = [GetListController.search, GetListController.filter, GetListController.query, GetListController.sort, GetListController.page, GetListController.execute, GetListController.serialize, GetListController.render];
var search = exports.search = GetListController.search;
var filter = exports.filter = GetListController.filter;
var query = exports.query = GetListController.query;
var sort = exports.sort = GetListController.sort;
var page = exports.page = GetListController.page;
var execute = exports.execute = GetListController.execute;
var serialize = exports.serialize = GetListController.serialize;
var render = exports.render = GetListController.render;