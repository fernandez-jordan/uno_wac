'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.render = exports.serialize = exports.create = exports.sanitize = exports.validate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractCreateController = require('./abstract-create-controller.js');

var _abstractCreateController2 = _interopRequireDefault(_abstractCreateController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var PostController = function (_AbstractCreateContro) {
    _inherits(PostController, _AbstractCreateContro);

    function PostController() {
        _classCallCheck(this, PostController);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(PostController).apply(this, arguments));
    }

    _createClass(PostController, null, [{
        key: 'validate',
        value: function validate(req, res, next) {
            if (!!req.body.data && !!req.body.data.attributes) {
                next();
            } else {
                _get(Object.getPrototypeOf(PostController), 'setException', this).call(this, 400, 'Request failed validation', next);
            }
        }

        /**
         * Creates then returns a new record with the passed data.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'create',
        value: function create(req, res, next) {
            var _this2 = this;

            var model = res.locals.model;

            if (!!model) {
                model.create(req.body.data.attributes, function (error, result) {
                    if (error) {
                        _get(Object.getPrototypeOf(PostController), 'setException', _this2).call(_this2, 500, 'Error on model save: ' + error.toString(), next);
                    }

                    res.locals.resource = result;

                    if (!!res.locals.populate) {
                        result.populate(res.locals.populate, function (populateError) {
                            if (error) {
                                _get(Object.getPrototypeOf(PostController), 'setException', _this2).call(_this2, 404, 'Error on model populate: ' + populateError.toString(), next);
                            } else {
                                next();
                            }
                        });
                    } else {
                        next();
                    }
                });
            } else {
                _get(Object.getPrototypeOf(PostController), 'setException', this).call(this, 500, 'Model not found.', next);
            }
        }
    }]);

    return PostController;
}(_abstractCreateController2.default);

exports.default = [PostController.validate, PostController.sanitize, PostController.create, PostController.serialize, PostController.render];
var validate = exports.validate = PostController.validate;
var sanitize = exports.sanitize = PostController.sanitize;
var create = exports.create = PostController.create;
var serialize = exports.serialize = PostController.serialize;
var render = exports.render = PostController.render;