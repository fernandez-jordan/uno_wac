'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */


var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../utils/logger.js');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * An abstract controller that contains common methods for all RESTful controllers.
 */

var AbstractController = function () {
    function AbstractController() {
        _classCallCheck(this, AbstractController);
    }

    _createClass(AbstractController, null, [{
        key: 'setModelNotFoundException',
        value: function setModelNotFoundException(next) {
            this.setException(500, 'Target Model Not Found', next);
        }
    }, {
        key: 'setException',
        value: function setException(status, message, next) {
            var err = new Error(message);
            _logger2.default.error(message);
            err.status = status;
            next(err);
        }

        /**
         * If a serializer is provided, the data is mapped from the model structure, to the provided response structure.
         *
         * // TODO make it asynchronous.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'serialize',
        value: function serialize(req, res, next) {
            var mapper = res.locals.mapper;

            // if there's a custom mapper / serializer
            if (!!mapper && typeof mapper.serialize === 'function') {
                (function () {
                    var serializedResults = [];

                    // if we have multiple resources
                    if (!!res.locals.resources) {
                        _lodash2.default.forEach(res.locals.resources, function (model) {
                            serializedResults.push(mapper.serialize(model));
                        });

                        res.locals.resources = serializedResults;

                        next();
                    } else if (!!res.locals.resource) {
                        // if we have a single resource
                        res.locals.resource = mapper.serialize(res.locals.resource);

                        next();
                    } else {
                        next();
                    }
                })();
            } else {
                // if it's not a lean query we have to convert all resources back to objects.
                if (!res.locals.lean) {
                    if (!!res.locals.resources && res.locals.resources.length > 0 && !!res.locals.resources[0].toObject) {
                        res.locals.resources = _lodash2.default.map(res.locals.resources, function (resource) {
                            return resource.toObject();
                        });
                    } else if (!!res.locals.resource && !!res.locals.resource.toObject) {
                        res.locals.resource = res.locals.resource.toObject();
                    }
                }

                next();
            }
        }
    }]);

    return AbstractController;
}();

exports.default = AbstractController;