'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.render = exports.serialize = exports.execute = exports.query = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractReadController = require('./abstract-read-controller.js');

var _abstractReadController2 = _interopRequireDefault(_abstractReadController);

var _logger = require('../utils/logger.js');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Josh Stuart <joshstuartx@gmail.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var GetController = function (_AbstractReadControll) {
    _inherits(GetController, _AbstractReadControll);

    function GetController() {
        _classCallCheck(this, GetController);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(GetController).apply(this, arguments));
    }

    _createClass(GetController, null, [{
        key: 'query',

        /**
         * Instantiates the monogo query by mapping the route and id to the mongoose model. This query is to find only one
         * resource.
         *
         * @param req
         * @param res
         * @param next
         */
        value: function query(req, res, next) {
            var criteria = {};

            if (!!res.locals.model) {
                if (!!res.locals.id && !!req.params[res.locals.id]) {
                    criteria[res.locals.id] = req.params[res.locals.id];
                    res.locals.query = res.locals.model.findOne(criteria);

                    if (!!res.locals.populate) {
                        _logger2.default.info('Populating model with the following fields: ' + res.locals.populate);
                        res.locals.query = res.locals.query.populate(res.locals.populate);
                    }

                    next();
                } else {
                    _get(Object.getPrototypeOf(GetController), 'setException', this).call(this, 400, 'Incorrect Parameter', next);
                }
            } else {
                _get(Object.getPrototypeOf(GetController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Executes the mongo query.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'execute',
        value: function execute(req, res, next) {
            var _this2 = this;

            var resQuery = res.locals.query;

            if (!!resQuery) {
                resQuery.lean(res.locals.lean);

                resQuery.exec('findOne').then(function (result) {
                    if (!result) {
                        _get(Object.getPrototypeOf(GetController), 'setException', _this2).call(_this2, 404, 'Resource not found', next);
                    } else {
                        res.locals.resource = result;
                        next();
                    }
                }, function (err) {
                    next(err);
                });
            } else {
                _get(Object.getPrototypeOf(GetController), 'setModelNotFoundException', this).call(this, next);
            }
        }

        /**
         * Renders the model to the json response.
         *
         * @param req
         * @param res
         * @param next
         */

    }, {
        key: 'render',
        value: function render(req, res, next) {
            var resource = res.locals.resource;

            if (typeof resource === 'undefined') {
                _get(Object.getPrototypeOf(GetController), 'setException', this).call(this, 500, 'Nothing to render', next);
            }

            // send the data back to the client
            res.json({
                meta: {
                    page: {
                        total: 1,
                        offset: 1,
                        limit: 1
                    }
                },
                data: resource
            });
        }
    }]);

    return GetController;
}(_abstractReadController2.default);

exports.default = [GetController.query, GetController.execute, GetController.serialize, GetController.render];
var query = exports.query = GetController.query;
var execute = exports.execute = GetController.execute;
var serialize = exports.serialize = GetController.serialize;
var render = exports.render = GetController.render;